const url = `http://localhost:5000/?table=my_app`;

class Save extends Component {
  constructor(props) {
    super(props);

    this.handleClick = this.handleClick.bind(
      this
    );

    this.state = {
      error: null,
      inflight: false,
      response: null
    };
  }

  handleClick(e) {
    e.preventDefault();
    this.setState(
      { inflight: true },
      () => {
        window
          .fetch(url, {
            body: JSON.stringify(
              this.props.body
            ),
            headers: {
              Accept:
                "application/json",
              "Content-Type":
                "application/json"
            },
            method: "POST",
            mode: "cors"
          })
          .then(res => res.json())
          .then(resp => {
            if (this.props.cb) {
              this.props.cb();
            }
            this.setState({
              inflight: false,
              response: resp
            });
          })
          .catch(error => {
            this.setState({
              error,
              inflight: false
            });
          });
      }
    );
  }

  render() {
    return (
      <button
        className="save-button"
        disabled={this.props.disabled}
        onClick={this.handleClick}
        type="submit"
      >
        {this.state.inflight
          ? "saving..."
          : "save"}
      </button>
    );
  }
}

class Form extends Component {
  constructor(props) {
    super(props);

    this.getSaved = this.getSaved.bind(
      this
    );
    this.handleInput = this.handleInput.bind(
      this
    );

    this.state = {
      input: null,
      saved: null
    };
  }

  componentDidMount() {
    this.getSaved();
  }

  getSaved() {
    window
      .fetch(url, {
        headers: {
          Accept: "application/json"
        },
        method: "GET",
        mode: "cors"
      })
      .then(res => res.json())
      .then(data => {
        if (data.length) {
          this.setState({
            saved:
              data[data.length - 1]
                .value
          });
        }
      })
      .catch(error => {
        console.error(error);
      });
  }

  handleInput({ target: { value } }) {
    this.setState({ input: value });
  }

  render() {
    return (
      <div>
        {this.state.saved ? (
          <div>
            <h3>saved:</h3>
            <p>{this.state.saved}</p>
          </div>
        ) : null}
        <form>
          <input
            className="input-box"
            onChange={this.handleInput}
            type="text"
          />
          <Save
            cb={this.getSaved}
            body={{
              value: this.state.input
            }}
            disabled={!this.state.input}
          />
        </form>
      </div>
    );
  }
}

render(<Form />);
